Different float syntaxes
-----
<?php

0.0;
0.;
.0;
0e0;
0E0;
0e+0;
0e-0;
30.20e10;
300.200e100;
1e10000;

// various integer -> float overflows
// (all are actually the same number, just in different representations)
18446744073709551615;
0xFFFFFFFFFFFFFFFF;
01777777777777777777777;
0177777777777777777777787;
0b1111111111111111111111111111111111111111111111111111111111111111;
-----
array(
    0: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    1: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    2: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    3: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    4: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    5: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    6: PHPParser\Node\Scalar\DNumberScalar(
        value: 0
    )
    7: PHPParser\Node\Scalar\DNumberScalar(
        value: 302000000000
    )
    8: PHPParser\Node\Scalar\DNumberScalar(
        value: 3.002E+102
    )
    9: PHPParser\Node\Scalar\DNumberScalar(
        value: INF
    )
    10: PHPParser\Node\Scalar\DNumberScalar(
        value: @@{ 0xFFFFFFFFFFFFFFFF }@@
    )
    11: PHPParser\Node\Scalar\DNumberScalar(
        value: @@{ 0xFFFFFFFFFFFFFFFF }@@
    )
    12: PHPParser\Node\Scalar\DNumberScalar(
        value: @@{ 0xFFFFFFFFFFFFFFFF }@@
    )
    13: PHPParser\Node\Scalar\DNumberScalar(
        value: @@{ 0xFFFFFFFFFFFFFFFF }@@
    )
    14: PHPParser\Node\Scalar\DNumberScalar(
        value: @@{ 0xFFFFFFFFFFFFFFFF }@@
    )
)