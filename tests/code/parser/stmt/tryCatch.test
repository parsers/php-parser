Try/catch
-----
<?php

try {
    doTry();
} catch (A $b) {
    doCatchA();
} catch (B $c) {
    doCatchB();
} finally {
    doFinally();
}

// no finally
try { }
catch (A $b) { }

// no catch
try { }
finally { }

-----
array(
    0: PHPParser\Node\Statement\TryCatchStatement(
        Statements: array(
            0: PHPParser\Node\Expression\FuncCallExpression(
                name: PHPParser\Node\NameNode(
                    parts: array(
                        0: doTry
                    )
                )
                args: array(
                )
            )
        )
        catches: array(
            0: PHPParser\Node\Statement\CatchStatement(
                type: PHPParser\Node\NameNode(
                    parts: array(
                        0: A
                    )
                )
                var: b
                Statements: array(
                    0: PHPParser\Node\Expression\FuncCallExpression(
                        name: PHPParser\Node\NameNode(
                            parts: array(
                                0: doCatchA
                            )
                        )
                        args: array(
                        )
                    )
                )
            )
            1: PHPParser\Node\Statement\CatchStatement(
                type: PHPParser\Node\NameNode(
                    parts: array(
                        0: B
                    )
                )
                var: c
                Statements: array(
                    0: PHPParser\Node\Expression\FuncCallExpression(
                        name: PHPParser\Node\NameNode(
                            parts: array(
                                0: doCatchB
                            )
                        )
                        args: array(
                        )
                    )
                )
            )
        )
        finallyStatements: array(
            0: PHPParser\Node\Expression\FuncCallExpression(
                name: PHPParser\Node\NameNode(
                    parts: array(
                        0: doFinally
                    )
                )
                args: array(
                )
            )
        )
    )
    1: PHPParser\Node\Statement\TryCatchStatement(
        Statements: array(
        )
        catches: array(
            0: PHPParser\Node\Statement\CatchStatement(
                type: PHPParser\Node\NameNode(
                    parts: array(
                        0: A
                    )
                )
                var: b
                Statements: array(
                )
            )
        )
        finallyStatements: null
    )
    2: PHPParser\Node\Statement\TryCatchStatement(
        Statements: array(
        )
        catches: array(
        )
        finallyStatements: array(
        )
    )
)