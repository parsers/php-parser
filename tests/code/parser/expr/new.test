New
-----
<?php

new A;
new A($b);

// class name variations
new $a();
new $a['b']();
new A::$b();
// DNCR object access
new $a->b();
new $a->b->c();
new $a->b['c']();
new $a->b{'c'}();

// test regression introduces by new dereferencing syntax
(new A);
-----
array(
    0: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\NameNode(
            parts: array(
                0: A
            )
        )
        args: array(
        )
    )
    1: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\NameNode(
            parts: array(
                0: A
            )
        )
        args: array(
            0: PHPParser\Node\ArgNode(
                value: PHPParser\Node\Expression\VariableExpression(
                    name: b
                )
                byRef: false
            )
        )
    )
    2: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\VariableExpression(
            name: a
        )
        args: array(
        )
    )
    3: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\ArrayDimFetchExpression(
            var: PHPParser\Node\Expression\VariableExpression(
                name: a
            )
            dim: PHPParser\Node\Scalar\StringScalar(
                value: b
            )
        )
        args: array(
        )
    )
    4: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\StaticPropertyFetchExpression(
            class: PHPParser\Node\NameNode(
                parts: array(
                    0: A
                )
            )
            name: b
        )
        args: array(
        )
    )
    5: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\PropertyFetchExpression(
            var: PHPParser\Node\Expression\VariableExpression(
                name: a
            )
            name: b
        )
        args: array(
        )
    )
    6: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\PropertyFetchExpression(
            var: PHPParser\Node\Expression\PropertyFetchExpression(
                var: PHPParser\Node\Expression\VariableExpression(
                    name: a
                )
                name: b
            )
            name: c
        )
        args: array(
        )
    )
    7: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\ArrayDimFetchExpression(
            var: PHPParser\Node\Expression\PropertyFetchExpression(
                var: PHPParser\Node\Expression\VariableExpression(
                    name: a
                )
                name: b
            )
            dim: PHPParser\Node\Scalar\StringScalar(
                value: c
            )
        )
        args: array(
        )
    )
    8: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\Expression\ArrayDimFetchExpression(
            var: PHPParser\Node\Expression\PropertyFetchExpression(
                var: PHPParser\Node\Expression\VariableExpression(
                    name: a
                )
                name: b
            )
            dim: PHPParser\Node\Scalar\StringScalar(
                value: c
            )
        )
        args: array(
        )
    )
    9: PHPParser\Node\Expression\NewExpression(
        class: PHPParser\Node\NameNode(
            parts: array(
                0: A
            )
        )
        args: array(
        )
    )
)